<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BSAG.IOCTalk.Common</name>
    </assembly>
    <members>
        <member name="T:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper">
            <summary>
            The wrapper contains serialized exception informations.
            </summary>
            <remarks>
             <para>
              Author: blink, created at 2/18/2015 4:52:06 PM.
             </para>
            </remarks>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper">
            <summary>
            Wrapper interface for exception serialization.
            </summary>
            <remarks>
             <para>
              Author: blink, created at 2/18/2015 5:46:22 PM.
             </para>
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.TrySerializeException(System.Exception)">
            <summary>
            Try exception serialization.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.TryDeserializeException(System.Exception@)">
            <summary>
            Try deserialize the binary wrapped exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.Name">
            <summary>
            Gets or sets the exception name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.TypeName">
            <summary>
            Gets or sets the full name of the type.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.Text">
            <summary>
            Gets or sets the exception text (ex.ToString).
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.Message">
            <summary>
            Gets or sets the message message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.IExceptionWrapper.BinaryData">
            <summary>
            Gets or sets the serialized exception binary data.
            </summary>
            <value>
            The binary data.
            </value>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.RemoteInvokeExceptionKey">
            <summary>
            Remote Invoke Exception Data dictionary key
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.#ctor">
            <summary>
            Creates and initializes an instance of the class <c>ExceptionWrapper</c>.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper"/> class.
            </summary>
            <param name="ex">The source exception.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.TrySerializeException(System.Exception)">
            <summary>
            Try exception serialization.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.TryDeserializeException(System.Exception@)">
            <summary>
            Try deserialize the binary wrapped exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.ToString">
            <summary>
            Returns the exception text.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.AddRemoteInvokeIdentification(System.Exception)">
            <summary>
            Adds the remote invoke identification to the given exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.Name">
            <summary>
            Gets or sets the exception name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.TypeName">
            <summary>
            Gets or sets the full name of the type.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.Text">
            <summary>
            Gets or sets the exception text (ex.ToString).
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.Message">
            <summary>
            Gets or sets the message message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.ExceptionWrapper.BinaryData">
            <summary>
            Gets or sets the serialized exception binary data.
            </summary>
            <value>
            The binary data.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Session.ISessionStateChanged">
            <summary>
            Specifies session state changed callback interface.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Session.ISessionStateChanged.OnSessionCreated(BSAG.IOCTalk.Common.Interface.Session.ISession)">
            <summary>
            Called when [session created].
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Session.ISessionStateChanged.OnSessionTerminated(BSAG.IOCTalk.Common.Interface.Session.ISession)">
            <summary>
            Called when the session is terminated.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.Raw.RawMessageReceivedDelegate">
            <summary>
            Delegate to process received raw messages.
            The raw message instance will be reused after the call.
            </summary>
            <param name="rawMessage">The raw message.</param>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.Raw.IRawMessage">
            <summary>
            RAW message interface
            </summary>
            <remarks>
             <para>
              Author: blink, created at 12/16/2014 3:39:07 PM.
             </para>
            </remarks>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.Raw.IRawMessage.MessageFormat">
            <summary>
            Gets the message format.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.Raw.IRawMessage.Length">
            <summary>
            Gets or sets the current read length.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.Raw.IRawMessage.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.Raw.IRawMessage.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.SessionManager`1">
            <summary>
            Default implementation of the IOC-Talk session manager
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-07-16
            </remarks>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Container.IServiceContractSessionManager`1">
            <summary>
            Session Manager interface
            </summary>
            <typeparam name="TServiceContractSession">The type of the service contract session.</typeparam>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IServiceContractSessionManager`1.OnServiceContractSessionCreated(BSAG.IOCTalk.Common.Interface.Session.ISession,`0)">
            <summary>
            Called when service contract session instance is created.
            </summary>
            <param name="session">The session.</param>
            <param name="serviceContractSessionInstance">The service contract session instance.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IServiceContractSessionManager`1.OnServiceContractSessionTerminated(BSAG.IOCTalk.Common.Interface.Session.ISession,`0)">
            <summary>
            Called when service contract session instance is terminated.
            </summary>
            <param name="session">The session.</param>
            <param name="serviceContractSessionInstance">The service contract session instance.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Container.IServiceContractSessionManager`1.ServiceContractSessions">
            <summary>
            Gets the service contract sessions.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.SessionManager`1.#ctor">
            <summary>
            Creates a new instance of the <c>SessionManager</c> class.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.SessionManager`1.OnServiceContractSessionCreated(BSAG.IOCTalk.Common.Interface.Session.ISession,`0)">
            <summary>
            Called when service contract session is created.
            </summary>
            <param name="session">The session.</param>
            <param name="serviceContractSessionInstance">The service contract session instance.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.SessionManager`1.OnServiceContractSessionTerminated(BSAG.IOCTalk.Common.Interface.Session.ISession,`0)">
            <summary>
            Called when service contract session is terminated.
            </summary>
            <param name="session">The session.</param>
            <param name="serviceContractSessionInstance">The service contract session instance.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.SessionManager`1.ServiceContractSessions">
            <summary>
            Gets the service contract sessions.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Logging.ILogger">
            <summary>
            Technical logging interface
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.ILogger.Debug(System.String)">
            <summary>
            Log debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.ILogger.Info(System.String)">
            <summary>
            Log info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.ILogger.Warn(System.String)">
            <summary>
            Log warn message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.ILogger.Error(System.String)">
            <summary>
            Log error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.SessionEventArgs">
            <summary>
            Session event args
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-07-11
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.SessionEventArgs.#ctor(BSAG.IOCTalk.Common.Interface.Session.ISession)">
            <summary>
            Creates a new instance of the <c>SessionEventArgs</c> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.SessionEventArgs.#ctor(BSAG.IOCTalk.Common.Interface.Session.ISession,System.Object)">
            <summary>
            Creates a new instance of the <c>SessionEventArgs</c> class.
            </summary>
            <param name="session">The session.</param>
            <param name="sessionContract">The session contract object.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.SessionEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.SessionEventArgs.SessionContract">
            <summary>
            Gets the session contract object.
            </summary>
            <value>
            The session contract.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.AbstractSession">
            <summary>
            Abstract implementation of the <see cref="T:BSAG.IOCTalk.Common.Interface.Session.ISession"/> interface.
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-07-11
            </remarks>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Session.ISession">
            <summary>
            Specifies a transfer session interface.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Session.ISession.Close">
            <summary>
            Closes the session.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Session.ISession.SessionId">
            <summary>
            Gets the session identity.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Session.ISession.Description">
            <summary>
            Gets the session description.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Session.ISession.CommunicationService">
            <summary>
            Gets the assigned communication service.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Session.ISession.IsActive">
            <summary>
            Gets a value indicating whether this session is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Session.ISession.PendingRequests">
            <summary>
            Gets the pending requests.
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Session.AbstractSession.sessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Session.AbstractSession.description">
            <summary>
            Session description
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Session.AbstractSession.communicationService">
            <summary>
            Related communication service
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Session.AbstractSession.isActive">
            <summary>
            Is session active
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Session.AbstractSession.pendingRequests">
            <summary>
            Pending request dictionary
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.AbstractSession.#ctor(BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService,System.Int32,System.String)">
            <summary>
            Abstract session constructor.
            </summary>
            <param name="communicationService">The communication service.</param>
            <param name="sessionId">The session id.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.AbstractSession.Close">
            <summary>
            Closes the session.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.AbstractSession.SessionId">
            <summary>
            Gets the session identity.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.AbstractSession.Description">
            <summary>
            Gets the session description.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.AbstractSession.CommunicationService">
            <summary>
            Gets the assigned communication service.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.AbstractSession.IsActive">
            <summary>
            Gets a value indicating whether this session is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.AbstractSession.PendingRequests">
            <summary>
            Gets the pending requests.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Attributes.ExposeSubTypeAttribute">
            <summary>
            The <see cref="T:BSAG.IOCTalk.Common.Attributes.ExposeSubTypeAttribute"/> exposes a specialized sub type during remote transfer when the service interface is not specialized.
            Only derived interfaces are allowed. Concrete class types are not supported!
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2014-03-27
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Attributes.ExposeSubTypeAttribute.#ctor">
            <summary>
            Creates a new instance of the <c>ExposeSubTypeAttribute</c> class.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Attributes.ExposeSubTypeAttribute.Type">
            <summary>
            Gets or sets the sub interface type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException">
            <summary>
            The NonSerializableRemoteException is used if the original exception could not be serialized.
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-08-21
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.#ctor(BSAG.IOCTalk.Common.Interface.Communication.IInvokeState,System.String)">
            <summary>
            Creates a new instance of the <c>NonSerializableRemoteException</c> class.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.#ctor(BSAG.IOCTalk.Common.Interface.Communication.IInvokeState,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException"/> class.
            </summary>
            <param name="invokeState">State of the invoke.</param>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
            <param name="typeName">Name of the type.</param>
            <param name="messageOnly">The message only.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.InvokeState">
            <summary>
            Gets the state of the invoke.
            </summary>
            <value>
            The state of the invoke.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.Name">
            <summary>
            Gets or sets the exception name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.TypeName">
            <summary>
            Gets or sets the full name of the type.
            </summary>
            <value>
            The full name of the type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.NonSerializableRemoteException.MessageOnly">
            <summary>
            Gets or sets the plain message without stack trace.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.MessageType">
            <summary>
            Defines the message types
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.MessageType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.MessageType.AsyncMethodInvokeRequest">
            <summary>
            Method invoke request without caller blocking
            Specified by the <see cref="!:RemoteInvokeBehaviourAttribute"/>
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.MessageType.MethodInvokeRequest">
            <summary>
            Method invoke request
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.MessageType.MethodInvokeResponse">
            <summary>
            Method invoke response
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.MessageType.Exception">
            <summary>
            Exception occured
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Attributes.RemoteInvokeBehaviourAttribute">
            <summary>
            The <see cref="T:BSAG.IOCTalk.Common.Attributes.RemoteInvokeBehaviourAttribute"/> specifies the remote invoke behaviour.
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-11-21
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Attributes.RemoteInvokeBehaviourAttribute.#ctor">
            <summary>
            Creates a new instance of the <c>InvokeBehaviourAttribute</c> class.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Attributes.RemoteInvokeBehaviourAttribute.IsAsyncRemoteInvoke">
            <summary>
            Gets or sets a value indicating whether this instance is async remote invoke.
            If <c>true</c> IOC Talk will call the method non-blocking and activate the automatic message flow control who only expects a response if necessary (buffer full).
            This is only valid on methods with return type "void".
            </summary>
            <value>
            	<c>true</c> if this instance is async remote invoke; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Logging.IDataStreamLogger">
            <summary>
            Data stream logging interface
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.IDataStreamLogger.Init(BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService,System.String,System.Xml.Linq.XElement)">
            <summary>
            Inits the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="configXml">The config XML.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.IDataStreamLogger.LogStreamMessage(System.Int32,System.Boolean,System.Byte[])">
            <summary>
            Logs the stream message.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="isReceive">if set to <c>true</c> [is receive].</param>
            <param name="messageData">The message data.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Logging.IDataStreamLogger.LogStreamMessage(System.Int32,System.Boolean,System.String)">
            <summary>
            Logs the stream message.
            </summary>
            <param name="sessionId">The session id.</param>
            <param name="isReceive">if set to <c>true</c> [is receive].</param>
            <param name="messageDataString">The message data string.</param>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Config.IXmlConfig">
            <summary>
            Interface provides a XML configuration.
            </summary>
            <remarks>
             <para>
              Author: blink, created at 3/25/2015 1:53:52 PM.
             </para>
            </remarks>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Config.IXmlConfig.Config">
            <summary>
            Gets or sets the xml configuration.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo">
            <summary>
            Caches reflection information for a method invoke
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.InterfaceMethod">
            <summary>
            Gets the interface method.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.ParameterInfos">
            <summary>
            Gets the parameter infos.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.OutParameters">
            <summary>
            Gets the out parameters.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.ImplementationMethod">
            <summary>
            Gets the implementation method.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.QualifiedMethodName">
            <summary>
            Gets the method name including the type parameters.
            </summary>
            <value>
            The name of the qualified method.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo.IsAsyncRemoteInvoke">
            <summary>
            Gets a value indicating whether this instance is async remote invoke.
            If <c>true</c> IOC Talk will call the method non-blocking and activate the automatic message flow control who only expects a response if necessary (buffer full).
            This is only valid on methods with return type "void". It can be specified with the <see cref="!:RemoteInvokeBehaviourAttribute"/> on the interface method.
            </summary>
            <value>
            	<c>true</c> if this instance is async remote invoke; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer">
            <summary>
            Specifies a <see cref="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage"/> serializer
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.RegisterContainerHost(BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost)">
            <summary>
            Registers the container host.
            </summary>
            <param name="containerHost">The container host.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.SerializeToString(BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage,System.Object)">
            <summary>
            Serializes the <see cref="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage"/> to string.
            </summary>
            <param name="message">The message.</param>
            <param name="contextObject">The context object.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.DeserializeFromString(System.String,System.Object)">
            <summary>
            Deserializes from string to a <see cref="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage"/>.
            </summary>
            <param name="messageString">The message string.</param>
            <param name="contextObject">The context object.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.SerializeToBytes(BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage,System.Object)">
            <summary>
            Serializes to byte array.
            </summary>
            <param name="message">The message.</param>
            <param name="contextObject">The context object.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.DeserializeFromBytes(System.Byte[],System.Object)">
            <summary>
            Deserializes from byte array.
            </summary>
            <param name="messageBytes">The message bytes.</param>
            <returns></returns>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessageSerializer.IsMissingFieldsInSourceDataAllowed">
            <summary>
            Gets or sets a value indicating whether this instance is missing fields in source data allowed.
            </summary>
            <value>
            	<c>true</c> if this instance is missing fields in source data allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Container.IGenericContractContainerHost`1">
            <summary>
            Specifies a dependency injection container host including a communication binding.
            </summary>
            <typeparam name="TServiceContractSession">The type of the service contract session. This class must inlcude all required imports for the communication. IOCTalk will create a single instance for every session (connection).</typeparam>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Container.IGenericContractContainerHost`2">
            <summary>
            Specifies a dependency injection container host including a communication binding.
            </summary>
            <typeparam name="TServiceContractSession">The type of the service contract session. This class must inlcude all required imports for the communication. IOCTalk will create a single instance for every session (connection).</typeparam>
            <typeparam name="TServiceContractSessionManager">The type of the service contract session manager. The session manager must implement the <see cref="!:IServiceContractSessionManager"/> interface who holds a list of all active sessions including callbacks for session created/terminated.</typeparam>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost">
            <summary>
            Specifies a dependency injection container host including a communication binding.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.InitGenericCommunication(BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService)">
            <summary>
            Initalizes the generic communication.
            </summary>
            <param name="communicationService">The communication service.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.CreateSessionContractInstance(BSAG.IOCTalk.Common.Interface.Session.ISession)">
            <summary>
            Creates the session contract instance.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.GetInterfaceImplementationInstance(BSAG.IOCTalk.Common.Interface.Session.ISession,System.String)">
            <summary>
            Gets the interface implementation instance.
            </summary>
            <param name="session">The session.</param>
            <param name="interfaceType">Type of the interface.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.GetInterfaceImplementationType(System.String)">
            <summary>
            Gets the interface implementation type.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.GetSessionByServiceInstance(System.Object)">
            <summary>
            Gets the session by the given service import instance.
            </summary>
            <param name="serviceObjectInstance">The service object instance.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.GetExposedSubInterfaceForType(System.Type)">
            <summary>
            Gets the type of the exposed sub interface.
            </summary>
            <param name="sourceType">Type of the concrete source.</param>
            <returns>Returns null if no sub interface is exposed</returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.RegisterExposedSubInterfaceForType(System.Type,System.Type)">
            <summary>
            Registers the type mapping for an exposed sub interface.
            </summary>
            <param name="interfaceType">Type of the exposed interface.</param>
            <param name="sourceType">Type of the concrete source.</param>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost.DIContainer">
            <summary>
            Gets the dependency injection container instance.
            </summary>
        </member>
        <member name="E:BSAG.IOCTalk.Common.Interface.Container.IGenericContractContainerHost`2.SessionCreated">
            <summary>
            Occurs when a session is created.
            </summary>
        </member>
        <member name="E:BSAG.IOCTalk.Common.Interface.Container.IGenericContractContainerHost`2.SessionTerminated">
            <summary>
            Occurs when a session is terminated.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Container.IGenericContractContainerHost`2.SessionManager">
            <summary>
            Gets the session manager.
            </summary>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.CreateSessionHandler">
            <summary>
            Handler to create a new session object.
            </summary>
            <param name="communicationSerivce">The communication serivce.</param>
            <param name="sessionId">The session id.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Exceptions.RemoteConnectionLostException">
            <summary>
            Remote connection lost exception
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-09-16
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Exceptions.RemoteConnectionLostException.#ctor(BSAG.IOCTalk.Common.Interface.Communication.IInvokeState)">
            <summary>
            Creates a new instance of the <c>RemoteConnectionLostException</c> class.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Exceptions.RemoteConnectionLostException.InvokeState">
            <summary>
            Gets the state of the invoke.
            </summary>
            <value>
            The state of the invoke.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.SessionServiceContractMapping`1">
            <summary>
            Session - Session Contract mapping
            </summary>
            <typeparam name="TServiceContractSession">The type of the service contract session.</typeparam>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.SessionServiceContractMapping`1.ServiceContract">
            <summary>
            Gets or sets the service contract.
            </summary>
            <value>
            The service contract.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Session.SessionServiceContractMapping`1.Session">
            <summary>
            Gets or sets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.SessionEventHandler`1">
            <summary>
            Session event handler
            </summary>
            <typeparam name="TServiceContractSession">The type of the service contract session.</typeparam>
            <param name="contractSession">The contract session.</param>
            <param name="e">The <see cref="T:BSAG.IOCTalk.Common.Session.SessionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState">
            <summary>
            Contains all invoke request/response mapping objects.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.RequestMessage">
            <summary>
            Gets or sets the request message.
            </summary>
            <value>
            The request message.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.WaitHandle">
            <summary>
            Gets or sets the wait handle.
            </summary>
            <value>
            The wait handle.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.ReturnObject">
            <summary>
            Gets or sets the return object.
            </summary>
            <value>
            The return object.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.OutParameterValues">
            <summary>
            Gets or sets the out parameter values.
            </summary>
            <value>
            The out parameter values.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IInvokeState.MethodSource">
            <summary>
            Gets or sets the method source.
            </summary>
            <value>
            The method source.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Reflection.TypeService">
            <summary>
            Reflection type service
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Reflection.TypeService.AutoGeneratedProxiesNamespace">
            <summary>
            Auto generated proxy namespace
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.BuildInterfaceImplementationType(System.String,System.Boolean)">
            <summary>
            Builds the type of the interface implementation.
            </summary>
            <param name="interfaceTypeFullname">The interface type fullname.</param>
            <param name="isAssemblyDebuggable">if set to <c>true</c> is auto generated assembly debuggable.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.TryGetTypeByName(System.String,System.Type@,System.Reflection.Assembly[])">
            <summary>
            Gets the type associated with the specified name.
            </summary>
            <param name="typeName">Full name of the type.</param>
            <param name="type">The type.</param>
            <param name="customAssemblies">Additional loaded assemblies (optional).</param>
            <returns>Returns <c>true</c> if the type was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.BuildProxyImplementation(System.Type,System.Boolean)">
            <summary>
            Builds the proxy implementation with MEF binding.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="addDebugInformation">if set to <c>true</c> [add debug information].</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.BuildProxyImplementation(System.Type,System.Boolean,System.String)">
            <summary>
            Builds the proxy implementation.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="addDebugInformation">if set to <c>true</c> [add debug information].</param>
            <param name="communicationServiceImportAttributeSource">The communication service import attribute source code.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.GetSourceCodeTypeName(System.Type)">
            <summary>
            Gets the name of the parameter type.
            </summary>
            <param name="paramType">Type of the param.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.GetMethodsByType(System.Type)">
            <summary>
            Gets the methods without get/set properties.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.GetMethodByName(System.Type,System.String)">
            <summary>
            Gets the method by the given name. The name can contain a qualified parameter list.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.GetQualifiedMethodName(System.Reflection.MethodInfo)">
            <summary>
            Gets the name of the method including the type parameters.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.TypeService.GetQualifiedMethodName(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Gets the name of the method including the type parameters.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="parameterInfos">The parameter infos.</param>
            <returns></returns>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Session.Session">
            <summary>
            Simple default session implementation.
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-07-11
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Session.Session.#ctor(BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService,System.Int32,System.String)">
            <summary>
            Creates a new instance of the <c>Session</c> class.
            </summary>
            <param name="communicationService">The communication service.</param>
            <param name="sessionId">The session id.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage">
            <summary>
            Specifies a generic message format
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage.Type">
            <summary>
            Gets the message type.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage.RequestId">
            <summary>
            Gets the request id.
            </summary>
            <value>
            The request id.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage.Target">
            <summary>
            Gets the target interface.
            </summary>
            <value>
            The interface.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage.Name">
            <summary>
            Gets the name of the request (method).
            </summary>
            <value>
            The name of the request.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericMessage.Payload">
            <summary>
            Gets the payload.
            </summary>
            <value>
            The payload.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService">
            <summary>
            Specifies an generic communication service interface.
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-07-09
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.Init">
            <summary>
            Inits the communication service.
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.Shutdown">
            <summary>
            Communication service shutdown
            </summary>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.RegisterContainerHost(BSAG.IOCTalk.Common.Interface.Container.IGenericContainerHost)">
            <summary>
            Registers the container host.
            </summary>
            <param name="containerHost">The container host.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.InvokeMethod``1(System.Object,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Invokes a remote interface method by a given lambda method expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.InvokeMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes a remote interface method.
            </summary>
            <param name="source">The source.</param>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.InvokeMethod(System.Object,BSAG.IOCTalk.Common.Interface.Reflection.IInvokeMethodInfo,System.Object[])">
            <summary>
            Invokes a remote interface method.
            </summary>
            <param name="source">The source.</param>
            <param name="invokeInfo">The invoke info.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="E:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.SessionCreated">
            <summary>
            Occurs when a session is created.
            </summary>
        </member>
        <member name="E:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.SessionTerminated">
            <summary>
            Occurs when a session is terminated.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.ContainerHost">
            <summary>
            Gets the container host.
            </summary>
            <value>
            The container host.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.SerializerTypeName">
            <summary>
            Gets or sets the name of the serializer type.
            </summary>
            <value>
            The name of the serializer type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.Serializer">
            <summary>
            Gets the message serializer.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.LoggerTypeName">
            <summary>
            Gets or sets the name of the logger type.
            </summary>
            <value>
            The name of the logger type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.LogDataStream">
            <summary>
            Gets or sets a value indicating whether [log data stream].
            </summary>
            <value>
              <c>true</c> if [log data stream]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.DataStreamLoggerTypeName">
            <summary>
            Gets or sets the name of the data stream logger type.
            </summary>
            <value>
            The name of the data stream logger type.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.DataStreamLogger">
            <summary>
            Gets the data stream logger.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.ClientSessions">
            <summary>
            Gets the client sessions.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Interface.Communication.IGenericCommunicationService.CustomCreateSessionHandler">
            <summary>
            Gets or sets the custom create session handler.
            </summary>
            <value>
            The custom create session handler.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo">
            <summary>
            Caches reflection information for a method invoke
            </summary>
            <remarks>
            Author(s): Benjamin Link
            created on: 2013-11-21
            </remarks>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.#ctor(System.Type,System.String,System.Type[])">
            <summary>
            Creates a new instance of the <c>InvokeMethodInfo</c> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.#ctor(System.Type,System.String,System.Type[],System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo"/> class.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="implementationType">Type of the implementation.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo"/> class.
            </summary>
            <param name="interfaceMethodInfo">The method info.</param>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.CreateKey(System.Type,System.String)">
            <summary>
            Creates a unique key for caching.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.CreateKey(System.Type,System.String,System.Type)">
            <summary>
            Creates a unique key for caching.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <param name="implementationType">Type of the implementation.</param>
            <returns></returns>
        </member>
        <member name="M:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.CreateKey(System.String,System.String,System.Type)">
             <summary>
            Creates a unique key for caching.
             </summary>
             <param name="interfaceTypeName">Name of the interface type.</param>
             <param name="methodName">Name of the method.</param>
             <param name="parameterTypes">The parameter types.</param>
             <param name="implementationType">Type of the implementation.</param>
             <returns></returns>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.InterfaceMethod">
            <summary>
            Gets the interface method.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.ImplementationMethod">
            <summary>
            Gets the implementation method.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.ParameterInfos">
            <summary>
            Gets the parameter infos.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.OutParameters">
            <summary>
            Gets the method out parameters.
            </summary>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.IsAsyncRemoteInvoke">
            <summary>
            Gets a value indicating whether this instance is async remote invoke.
            If <c>true</c> IOC Talk will call the method non-blocking and activate the automatic message flow control who only expects a response if necessary (buffer full).
            This is only valid on methods with return type "void". It can be specified with the <see cref="T:BSAG.IOCTalk.Common.Attributes.RemoteInvokeBehaviourAttribute"/> on the interface method.
            </summary>
            <value>
            	<c>true</c> if this instance is async remote invoke; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BSAG.IOCTalk.Common.Reflection.InvokeMethodInfo.QualifiedMethodName">
            <summary>
            Gets the method name including the type parameters.
            </summary>
            <value>
            The name of the qualified method.
            </value>
        </member>
        <member name="T:BSAG.IOCTalk.Common.Interface.Communication.Raw.RawMessageFormat">
            <summary>
            Defines the raw message formats
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.Raw.RawMessageFormat.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.Raw.RawMessageFormat.JSON">
            <summary>
            JSON format (UTF-8 encoded)
            </summary>
        </member>
        <member name="F:BSAG.IOCTalk.Common.Interface.Communication.Raw.RawMessageFormat.IncompleteControlDataSlice">
            <summary>
            Incomplete encapsulation control data slice
            </summary>
        </member>
    </members>
</doc>
